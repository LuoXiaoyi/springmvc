<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         id="WebApp_ID" version="3.1">
    <display-name>spring-mvc</display-name>

    <!-- 如果单独这么定义一个servlet，则必须要在WEB-INF目录下存在一个叫dispatcherServlet-servlet.xml的文件，
    不然启动的时候可能报错，找不到这个文件(/WEB-INF/dispatcherServlet-servlet.xml)  -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <init-param>
            <!-- 通过定义初始化参数来避免加载默认的配置文件 -->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <!-- / 不会匹配JSP页面，/* 匹配所有的资源 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 对put数据的处理过滤器 -->
    <filter>
        <filter-name>httpPutFormFilter</filter-name>
        <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>httpPutFormFilter</filter-name>
        <servlet-name>dispatcherServlet</servlet-name>
    </filter-mapping>

    <!-- html 页面不走DispatcherServlet
      和这个xml的配置效果相当<mvc:default-servlet-handler/>，通常如果配置了mvc的xml配置，这个配置就不需要了。
    -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <!-- 这样配置，并不能把jsp页面送到default处理，所以以下配置无效 -->
    <!-- servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jsp</url-pattern>
    </servlet-mapping -->

    <welcome-file-list>
        <welcome-file>/index.html</welcome-file>
    </welcome-file-list>
</web-app>